#pragma once
#include <wchar.h>
typedef struct{
    unsigned long length;
    void **data;
    unsigned int tsize;
} array2d;

typedef struct{
    unsigned long length;
    long *data;
    unsigned int tsize;
} array1d;


typedef struct linkedlist{
    struct linkedlist *prev;
    void *elem;
    struct linkedlist *next; 
} linkedlist;

array2d *array2d_new(array2d *a, unsigned int tsize);
array2d *array2d_push(array2d *a, void *elem, unsigned long size);
void array2d_free(array2d *a);

array1d *array1d_new(array1d *a, unsigned int tsize);
array1d *array1d_push(array1d *a, long elem);
void array1d_free(array1d *a);
//typedef array1d string;
typedef struct{
    wchar_t *data;
    unsigned long length;
}   string;

string *string_new(string *s);
#define string_addchar(s, c) \
    _Generic((c), char: string_addchar_chr, \
            wchar_t: string_addchar_wchr)(s,c)
string *string_addchar_chr(string *s, char c);
string *string_addchar_wchr(string *s, wchar_t wc);
//string *string_addchar(string *s, char c);
#define string_concat(s,x) _Generic((x), \
        string: string_concat_str, \
        char*: string_concat_cstr,\
        wchar_t*: string_concat_wcstr)(s,x)
string *string_concat_str(string *s, const string *s2);
string *string_concat_cstr(string *s, const char *str2);
string *string_concat_wcstr(string *s, const wchar_t *wcstr2);

unsigned long string_getlength(string *s);
void string_free(string *s);

//how many n of tsize to allocate
//it is safe in the sense you will never forget to pass through the data type size
//but not safe in the sense you can still fuck up the mathematics with n and everything
void *lsafe_realloc(void *data, unsigned long n, unsigned short tsize);
